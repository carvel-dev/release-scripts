(@ load("@ytt:data", "data") @)
(@ load("helpers.star", "addProtocol") @)

#!/bin/bash
## **This is an autogenerated file, do not change it manually**

if test -z "$BASH_VERSION"; then
  echo "Please run this script using bash, not sh or any other shell." >&2
  exit 1
fi

# Function to check for required commands
check_command() {
    command -v "$1" >/dev/null 2>&1 || { echo >&2 "Error: $1 is required but not installed."; exit 1; }
}

# Check for required commands
check_command sha256sum || check_command sha1sum

# Set checksum command based on availability
CHECKSUM_CMD=sha256sum
if ! command -v $CHECKSUM_CMD >/dev/null 2>&1; then
    CHECKSUM_CMD=sha1sum
fi

install() {
  set -euo pipefail

  dst_dir="${K14SIO_INSTALL_BIN_DIR:-/usr/local/bin}"

  if [ -x "$(command -v wget)" ]; then
    dl_bin="wget -nv -O-"
  else
    check_command curl
    dl_bin="curl -s -L"
  fi

  $CHECKSUM_CMD -v 1>/dev/null 2>&1 || (echo "Missing shasum binary" && exit 1)

  if [[ `uname` == Darwin ]]; then
    binary_type=darwin-amd64
    (@ for val in data.values.products: @)(@ for asset in val.assets: @)(@ if asset.os == "darwin" and asset.arch=="amd64": @)
    (@=val.product @)_checksum=(@=asset.shasum @)(@ end @)(@ end @)(@ end @)
  else
    binary_type=linux-amd64
    (@ for val in data.values.products: @)(@ for asset in val.assets: @)(@ if asset.os == "linux" and asset.arch=="amd64": @)
    (@=val.product @)_checksum=(@=asset.shasum @)(@ end @)(@ end @)(@ end @)
  fi

  echo "Installing ${binary_type} binaries..."

  (@ for val in data.values.products: @)
  echo "Installing (@= val.product @)..."
  $dl_bin (@= addProtocol(val.github.url) @)/releases/download/(@= val.version @)/(@= val.product @)-${binary_type} > /tmp/(@= val.product @)
  echo "${(@= val.product @)_checksum}  /tmp/(@= val.product @)" | $CHECKSUM_CMD -c -
  mv /tmp/(@= val.product @) ${dst_dir}/(@= val.product @)
  chmod +x ${dst_dir}/(@= val.product @)
  echo "Installed ${dst_dir}/(@= val.product @) (@= val.version @)"
  (@ end @)
}

install
